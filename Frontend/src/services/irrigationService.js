import axios from 'axios';

const getAuthHeader = () => {
    const token = localStorage.getItem('token');
    return token ? { Authorization: `Bearer ${token}` } : {};
};

// API endpoints - Using correct backend endpoints with full URL
const API_BASE = 'http://localhost:8080/api';

// Core irrigation functions - using correct backend endpoints
const logIrrigation = (data) => 
    axios.post(`${API_BASE}/irrigation`, data, { headers: getAuthHeader() });

// Updated to use correct backend endpoint - ALWAYS requires fieldId parameter
const getIrrigationHistory = (fieldId) => {
    // Backend ALWAYS requires fieldId parameter, no option to get all data without it
    if (!fieldId || fieldId <= 0) {
        throw new Error('fieldId l√† b·∫Øt bu·ªôc - Backend kh√¥ng cho ph√©p l·∫•y t·∫•t c·∫£ d·ªØ li·ªáu m√† kh√¥ng c√≥ fieldId');
    }
    
    const url = `${API_BASE}/irrigation?fieldId=${fieldId}`;
    return axios.get(url, { headers: getAuthHeader() });
};

// Fertilization functions - using correct backend endpoints
const logFertilization = (data) => 
    axios.post(`${API_BASE}/fertilization`, data, { headers: getAuthHeader() });

// Updated to use correct backend endpoint - ALWAYS requires fieldId parameter  
const getFertilizationHistory = (fieldId) => {
    // Backend ALWAYS requires fieldId parameter, no option to get all data without it
    if (!fieldId || fieldId <= 0) {
        throw new Error('fieldId l√† b·∫Øt bu·ªôc - Backend kh√¥ng cho ph√©p l·∫•y t·∫•t c·∫£ d·ªØ li·ªáu m√† kh√¥ng c√≥ fieldId');
    }
    
    const url = `${API_BASE}/fertilization?fieldId=${fieldId}`;
    return axios.get(url, { headers: getAuthHeader() });
};

// Combined history functions
const getCombinedHistory = async (fieldId) => {
    try {
        const [irrigationResponse, fertilizationResponse] = await Promise.all([
            getIrrigationHistory(fieldId),
            getFertilizationHistory(fieldId)
        ]);
        
        return {
            irrigation: irrigationResponse.data || [],
            fertilization: fertilizationResponse.data || []
        };
    } catch (error) {
        console.error('Error fetching combined history:', error);
        throw error;
    }
};

// Get recent activities
const getRecentActivities = (limit = 10) => 
    axios.get(`${API_BASE}/irrigation/recent?limit=${limit}`, { headers: getAuthHeader() });

// Farm management functions - s·ª≠ d·ª•ng correct API endpoints
const getFarms = () => 
    axios.get(`${API_BASE}/farms`, { headers: getAuthHeader() });

const getFieldsByFarm = (farmId) => 
    axios.get(`${API_BASE}/farms/${farmId}/fields`, { headers: getAuthHeader() });

// Get irrigation history by farm - backend REQUIRES fieldId, so get data for each field
const getIrrigationHistoryByFarm = async (farmId, fieldId = null) => {
    try {
        console.log(`üîç L·∫•y d·ªØ li·ªáu t∆∞·ªõi ti√™u cho farm ${farmId}, field ${fieldId}`);
        
        // If specific field is selected, get data for that field only
        if (fieldId && fieldId > 0) {
            console.log(`üéØ L·∫•y d·ªØ li·ªáu cho field c·ª• th·ªÉ: ${fieldId}`);
            try {
                const response = await axios.get(`${API_BASE}/irrigation?fieldId=${fieldId}`, { headers: getAuthHeader() });
                const data = response.data || [];
                console.log(`‚úÖ D·ªØ li·ªáu cho field ${fieldId}:`, data);
                return { data };
            } catch (fieldError) {
                console.log(`‚ö†Ô∏è Field ${fieldId}: Kh√¥ng c√≥ d·ªØ li·ªáu t∆∞·ªõi ti√™u ho·∫∑c l·ªói -`, fieldError.response?.status, fieldError.message);
                if (fieldError.response?.status === 404) {
                    console.log(`üìù Field ${fieldId} kh√¥ng c√≥ d·ªØ li·ªáu t∆∞·ªõi ti√™u trong database`);
                    return { data: [] }; // Return empty array instead of throwing error
                }
                throw fieldError; // Re-throw other errors
            }
        }
        
        // If "All Fields" selected (fieldId = 0), we need to get all fields first, then get data for each
        console.log(`üîÑ L·∫•y t·∫•t c·∫£ fields cho farm ${farmId} tr∆∞·ªõc, sau ƒë√≥ l·∫•y d·ªØ li·ªáu cho t·ª´ng field`);
        
        // First get all fields for this farm
        const fieldsResponse = await axios.get(`${API_BASE}/farms/${farmId}/fields`, { headers: getAuthHeader() });
        const fields = fieldsResponse.data || [];
        
        if (fields.length === 0) {
            console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y field n√†o cho farm n√†y');
            return { data: [] };
        }
        
        console.log(`üìã T√¨m th·∫•y ${fields.length} fields, ƒëang l·∫•y d·ªØ li·ªáu t∆∞·ªõi ti√™u cho t·ª´ng field`);
        
        // Get irrigation data for each field
        const allData = [];
        for (const field of fields) {
            try {
                const response = await axios.get(`${API_BASE}/irrigation?fieldId=${field.id}`, { headers: getAuthHeader() });
                const fieldData = response.data || [];
                allData.push(...fieldData);
                console.log(`‚úÖ Field ${field.id}: ${fieldData.length} b·∫£n ghi t∆∞·ªõi ti√™u`);
            } catch (fieldError) {
                console.log(`‚ö†Ô∏è Field ${field.id}: Kh√¥ng c√≥ d·ªØ li·ªáu t∆∞·ªõi ti√™u ho·∫∑c l·ªói -`, fieldError.response?.status, fieldError.message);
                if (fieldError.response?.status === 404) {
                    console.log(`   üìù Field ${field.id} ch∆∞a c√≥ d·ªØ li·ªáu t∆∞·ªõi ti√™u trong database`);
                } else {
                    console.log(`   üî¥ L·ªói kh√°c cho field ${field.id}:`, fieldError.response?.data);
                }
                // Continue v·ªõi field ti·∫øp theo thay v√¨ d·ª´ng
            }
        }
        
        console.log(`‚úÖ T·ªïng s·ªë b·∫£n ghi t∆∞·ªõi ti√™u: ${allData.length}`);
        return { data: allData };
        
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t∆∞·ªõi ti√™u theo farm:', error);
        
        // If it's a 404 error (no data found), return empty array instead of throwing
        if (error.response?.status === 404) {
            console.log('üìù Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t∆∞·ªõi ti√™u cho farm n√†y, tr·∫£ v·ªÅ m·∫£ng r·ªóng');
            return { data: [] };
        }
        
        // For other errors, still throw to let UI handle appropriately
        throw error;
    }
};

// Get fertilization history by farm - backend REQUIRES fieldId, so get data for each field
const getFertilizationHistoryByFarm = async (farmId, fieldId = null) => {
    try {
        console.log(`üîç L·∫•y d·ªØ li·ªáu b√≥n ph√¢n cho farm ${farmId}, field ${fieldId}`);
        
        // If specific field is selected, get data for that field only
        if (fieldId && fieldId > 0) {
            console.log(`üéØ L·∫•y d·ªØ li·ªáu cho field c·ª• th·ªÉ: ${fieldId}`);
            try {
                const response = await axios.get(`${API_BASE}/fertilization?fieldId=${fieldId}`, { headers: getAuthHeader() });
                const data = response.data || [];
                console.log(`‚úÖ D·ªØ li·ªáu cho field ${fieldId}:`, data);
                return { data };
            } catch (fieldError) {
                console.log(`‚ö†Ô∏è Field ${fieldId}: Kh√¥ng c√≥ d·ªØ li·ªáu b√≥n ph√¢n ho·∫∑c l·ªói -`, fieldError.response?.status, fieldError.message);
                if (fieldError.response?.status === 404) {
                    console.log(`üìù Field ${fieldId} kh√¥ng c√≥ d·ªØ li·ªáu b√≥n ph√¢n trong database`);
                    return { data: [] }; // Return empty array instead of throwing error
                }
                throw fieldError; // Re-throw other errors
            }
        }
        
        // If "All Fields" selected (fieldId = 0), we need to get all fields first, then get data for each
        console.log(`üîÑ L·∫•y t·∫•t c·∫£ fields cho farm ${farmId} tr∆∞·ªõc, sau ƒë√≥ l·∫•y d·ªØ li·ªáu cho t·ª´ng field`);
        
        // First get all fields for this farm
        const fieldsResponse = await axios.get(`${API_BASE}/farms/${farmId}/fields`, { headers: getAuthHeader() });
        const fields = fieldsResponse.data || [];
        
        if (fields.length === 0) {
            console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y field n√†o cho farm n√†y');
            return { data: [] };
        }
        
        console.log(`üìã T√¨m th·∫•y ${fields.length} fields, ƒëang l·∫•y d·ªØ li·ªáu b√≥n ph√¢n cho t·ª´ng field`);
        
        // Get fertilization data for each field
        const allData = [];
        for (const field of fields) {
            try {
                const response = await axios.get(`${API_BASE}/fertilization?fieldId=${field.id}`, { headers: getAuthHeader() });
                const fieldData = response.data || [];
                allData.push(...fieldData);
                console.log(`‚úÖ Field ${field.id}: ${fieldData.length} b·∫£n ghi b√≥n ph√¢n`);
            } catch (fieldError) {
                console.log(`‚ö†Ô∏è Field ${field.id}: Kh√¥ng c√≥ d·ªØ li·ªáu b√≥n ph√¢n ho·∫∑c l·ªói -`, fieldError.response?.status, fieldError.message);
                if (fieldError.response?.status === 404) {
                    console.log(`   üìù Field ${field.id} ch∆∞a c√≥ d·ªØ li·ªáu b√≥n ph√¢n trong database`);
                } else {
                    console.log(`   üî¥ L·ªói kh√°c cho field ${field.id}:`, fieldError.response?.data);
                }
                // Continue v·ªõi field ti·∫øp theo thay v√¨ d·ª´ng
            }
        }
        
        console.log(`‚úÖ T·ªïng s·ªë b·∫£n ghi b√≥n ph√¢n: ${allData.length}`);
        return { data: allData };
        
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu b√≥n ph√¢n theo farm:', error);
        
        // If it's a 404 error (no data found), return empty array instead of throwing
        if (error.response?.status === 404) {
            console.log('üìù Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu b√≥n ph√¢n cho farm n√†y, tr·∫£ v·ªÅ m·∫£ng r·ªóng');
            return { data: [] };
        }
        
        // For other errors, still throw to let UI handle appropriately
        throw error;
    }
};

// Alternative endpoints that require fieldId
const getIrrigationHistoryAll = (fieldId) => {
    if (!fieldId) throw new Error('fieldId is required');
    return axios.get(`${API_BASE}/irrigation?fieldId=${fieldId}`, { headers: getAuthHeader() });
};

const getFertilizationHistoryAll = (fieldId) => {
    if (!fieldId) throw new Error('fieldId is required');
    return axios.get(`${API_BASE}/fertilization?fieldId=${fieldId}`, { headers: getAuthHeader() });
};

// Debug functions to test correct API endpoints
const testDatabaseEndpoints = async () => {
    const endpoints = [
        // Test endpoints that work
        'http://localhost:8080/api/farms',
        'http://localhost:8080/api/farms/1/fields',
        'http://localhost:8080/api/irrigation?fieldId=7',
        'http://localhost:8080/api/fertilization?fieldId=1'
    ];
    
    console.log('=== TESTING BACKEND ENDPOINTS WITH REQUIRED PARAMETERS ===');
    const results = {};
    
    for (const endpoint of endpoints) {
        try {
            const response = await axios.get(endpoint, { headers: getAuthHeader() });
            console.log(`‚úÖ ${endpoint}:`, response.data);
            results[endpoint] = { success: true, data: response.data };
        } catch (error) {
            console.log(`‚ùå ${endpoint}:`, error.response?.status, error.message);
            results[endpoint] = { success: false, error: error.message, status: error.response?.status };
        }
    }
    
    return results;
};

// Test function to check database connection and data
const testDatabaseConnection = async () => {
    console.log('üóÑÔ∏è KI·ªÇM TRA K·∫æT N·ªêI DATABASE...');
    
    try {
        // 1. Test farms data
        console.log('\n1. Testing Farms data t·ª´ database:');
        const farmsResponse = await axios.get(`${API_BASE}/farms`, { headers: getAuthHeader() });
        const farmsData = farmsResponse.data || [];
        console.log(`‚úÖ Farms: ${farmsData.length} b·∫£n ghi t·ª´ database`);
        console.log('D·ªØ li·ªáu farms:', farmsData);
        
        if (farmsData.length > 0) {
            // Try to find a farm that has fields
            let farmWithFields = null;
            let fieldsData = [];
            
            console.log('\n2. Testing Fields data cho t·ª´ng farm:');
            for (const farm of farmsData) {
                try {
                    console.log(`   Checking farm ${farm.id} (${farm.name || 'Unnamed'})...`);
                    const fieldsResponse = await axios.get(`${API_BASE}/farms/${farm.id}/fields`, { headers: getAuthHeader() });
                    const currentFields = fieldsResponse.data || [];
                    
                    if (currentFields.length > 0) {
                        farmWithFields = farm;
                        fieldsData = currentFields;
                        console.log(`   ‚úÖ Farm ${farm.id}: ${currentFields.length} fields t√¨m th·∫•y!`);
                        break; // Found a farm with fields, stop searching
                    } else {
                        console.log(`   ‚ö†Ô∏è Farm ${farm.id}: Kh√¥ng c√≥ fields`);
                    }
                } catch (fieldError) {
                    console.log(`   ‚ùå Farm ${farm.id}: L·ªói khi l·∫•y fields -`, fieldError.response?.status);
                }
            }
            
            if (farmWithFields && fieldsData.length > 0) {
                console.log(`\n‚úÖ S·ª≠ d·ª•ng Farm ${farmWithFields.id} (${farmWithFields.name || 'Unnamed'}) v·ªõi ${fieldsData.length} fields`);
                console.log('D·ªØ li·ªáu fields:', fieldsData);
                
                // Test irrigation v√† fertilization data cho field ƒë·∫ßu ti√™n
                const firstField = fieldsData[0];
                console.log(`\n3. Testing Irrigation data cho field "${firstField.name || firstField.fieldName || firstField.id}":`);
                
                try {
                    const irrigationResponse = await axios.get(`${API_BASE}/irrigation?fieldId=${firstField.id}`, { headers: getAuthHeader() });
                    const irrigationData = irrigationResponse.data || [];
                    console.log(`‚úÖ Irrigation: ${irrigationData.length} b·∫£n ghi t·ª´ database`);
                    if (irrigationData.length > 0) {
                        console.log('D·ªØ li·ªáu irrigation m·∫´u:', irrigationData[0]);
                        console.log('C√°c thu·ªôc t√≠nh irrigation:', Object.keys(irrigationData[0]));
                    }
                } catch (irrigationError) {
                    console.log(`‚ö†Ô∏è Irrigation: Ch∆∞a c√≥ d·ªØ li·ªáu cho field ${firstField.id}`);
                    console.log('Chi ti·∫øt:', irrigationError.response?.status, irrigationError.response?.data?.message);
                }
                
                console.log(`\n4. Testing Fertilization data cho field "${firstField.name || firstField.fieldName || firstField.id}":`);
                
                try {
                    const fertilizationResponse = await axios.get(`${API_BASE}/fertilization?fieldId=${firstField.id}`, { headers: getAuthHeader() });
                    const fertilizationData = fertilizationResponse.data || [];
                    console.log(`‚úÖ Fertilization: ${fertilizationData.length} b·∫£n ghi t·ª´ database`);
                    if (fertilizationData.length > 0) {
                        console.log('D·ªØ li·ªáu fertilization m·∫´u:', fertilizationData[0]);
                        console.log('C√°c thu·ªôc t√≠nh fertilization:', Object.keys(fertilizationData[0]));
                    }
                } catch (fertilizationError) {
                    console.log(`‚ö†Ô∏è Fertilization: Ch∆∞a c√≥ d·ªØ li·ªáu cho field ${firstField.id}`);
                    console.log('Chi ti·∫øt:', fertilizationError.response?.status, fertilizationError.response?.data?.message);
                }
                
                // Test th√™m v√†i fields kh√°c n·∫øu c√≥
                if (fieldsData.length > 1) {
                    console.log(`\n5. Testing th√™m ${Math.min(fieldsData.length - 1, 3)} fields kh√°c:`);
                    for (let i = 1; i < Math.min(fieldsData.length, 4); i++) {
                        const field = fieldsData[i];
                        console.log(`   Field ${field.id} (${field.name || field.fieldName || 'Unnamed'}):`);
                        
                        // Quick check for irrigation data
                        try {
                            const irrigationResponse = await axios.get(`${API_BASE}/irrigation?fieldId=${field.id}`, { headers: getAuthHeader() });
                            console.log(`     - Irrigation: ${irrigationResponse.data?.length || 0} b·∫£n ghi`);
                        } catch (e) {
                            console.log(`     - Irrigation: Kh√¥ng c√≥ d·ªØ li·ªáu`);
                        }
                        
                        // Quick check for fertilization data
                        try {
                            const fertilizationResponse = await axios.get(`${API_BASE}/fertilization?fieldId=${field.id}`, { headers: getAuthHeader() });
                            console.log(`     - Fertilization: ${fertilizationResponse.data?.length || 0} b·∫£n ghi`);
                        } catch (e) {
                            console.log(`     - Fertilization: Kh√¥ng c√≥ d·ªØ li·ªáu`);
                        }
                    }
                }
                
            } else {
                console.log('\n‚ö†Ô∏è KH√îNG T√åM TH·∫§Y FARM N√ÄO C√ì FIELDS!');
                console.log('T·∫•t c·∫£ farms ƒë·ªÅu kh√¥ng c√≥ fields ho·∫∑c c√≥ l·ªói khi truy c·∫≠p fields.');
                console.log('B·∫°n c√≥ th·ªÉ c·∫ßn:');
                console.log('1. Th√™m fields v√†o database cho c√°c farms');
                console.log('2. Ki·ªÉm tra API endpoint /farms/{id}/fields');
                console.log('3. Ki·ªÉm tra d·ªØ li·ªáu trong database');
            }
        } else {
            console.log('‚ö†Ô∏è Kh√¥ng c√≥ farms trong database ƒë·ªÉ test');
        }
        
        console.log('\nüéâ HO√ÄN T·∫§T KI·ªÇM TRA DATABASE!');
        return { success: true, message: 'Database connection test completed' };
        
    } catch (error) {
        console.error('‚ùå L·ªñI KHI KI·ªÇM TRA DATABASE:', error);
        console.error('Chi ti·∫øt:', error.response?.data || error.message);
        return { success: false, error: error.message };
    }
};

// Debug function - fixed to test with fieldId
const debugApiDataStructure = async () => {
    try {
        console.log('üîç DEBUGGING API DATA STRUCTURE & AUTHENTICATION');
        
        // First check authentication
        const authHeaders = getAuthHeader();
        const token = localStorage.getItem('token');
        console.log('üîê Tr·∫°ng th√°i x√°c th·ª±c:');
        console.log('- Token t·ªìn t·∫°i:', !!token);
        console.log('- Token preview:', token ? `${token.substring(0, 20)}...` : 'Kh√¥ng c√≥ token');
        console.log('- Auth headers:', authHeaders);
        
        // Test with fieldId parameter (as backend requires)
        console.log('\nüß™ Testing API v·ªõi fieldId parameter...');
        
        try {
            // Test irrigation with fieldId=7
            console.log('Testing: GET /api/irrigation?fieldId=7');
            const irrigationResponse = await axios.get(`${API_BASE}/irrigation?fieldId=7`, { headers: getAuthHeader() });
            const irrigationData = irrigationResponse.data || [];
            
            console.log('‚úÖ IRRIGATION API SUCCESS:');
            console.log('- Status:', irrigationResponse.status);
            console.log('- S·ªë b·∫£n ghi:', irrigationData.length);
            console.log('- B·∫£n ghi m·∫´u:', irrigationData[0]);
            if (irrigationData[0]) {
                console.log('- C√°c thu·ªôc t√≠nh c√≥ s·∫µn:', Object.keys(irrigationData[0]));
            }
            
        } catch (irrigationError) {
            console.error('‚ùå IRRIGATION API ERROR:', irrigationError.response?.status, irrigationError.message);
            console.error('- Chi ti·∫øt l·ªói:', irrigationError.response?.data);
        }
        
        try {
            console.log('Testing: GET /api/fertilization?fieldId=1');
            const fertilizationResponse = await axios.get(`${API_BASE}/fertilization?fieldId=1`, { headers: getAuthHeader() });
            const fertilizationData = fertilizationResponse.data || [];
            
            console.log('‚úÖ FERTILIZATION API SUCCESS:');
            console.log('- Status:', fertilizationResponse.status);
            console.log('- S·ªë b·∫£n ghi:', fertilizationData.length);
            console.log('- B·∫£n ghi m·∫´u:', fertilizationData[0]);
            if (fertilizationData[0]) {
                console.log('- C√°c thu·ªôc t√≠nh c√≥ s·∫µn:', Object.keys(fertilizationData[0]));
            }
            
        } catch (fertilizationError) {
            console.error('‚ùå FERTILIZATION API ERROR:', fertilizationError.response?.status, fertilizationError.message);
            console.error('- Chi ti·∫øt l·ªói:', fertilizationError.response?.data);
        }
        
        try {
            console.log('Testing: GET /api/farms');
            const farmsResponse = await axios.get(`${API_BASE}/farms`, { headers: getAuthHeader() });
            const farmsData = farmsResponse.data || [];
            
            console.log('‚úÖ FARMS API SUCCESS:');
            console.log('- T·ªïng s·ªë farms:', farmsData.length);
            console.log('- Farm m·∫´u:', farmsData[0]);
            
            // Test fields API for first farm
            if (farmsData.length > 0) {
                const fieldsResponse = await axios.get(`${API_BASE}/farms/${farmsData[0].id}/fields`, { headers: getAuthHeader() });
                const fieldsData = fieldsResponse.data || [];
                
                console.log('‚úÖ FIELDS API SUCCESS for farm', farmsData[0].id);
                console.log('- T·ªïng s·ªë fields:', fieldsData.length);
                console.log('- Field m·∫´u:', fieldsData[0]);
            }
            
            return {
                irrigation: [],
                fertilization: [],
                farms: farmsData
            };
            
        } catch (farmsError) {
            console.error('‚ùå FARMS API ERROR:', farmsError.response?.status, farmsError.message);
            console.error('- Chi ti·∫øt l·ªói:', farmsError.response?.data);
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói nghi√™m tr·ªçng trong debug function:', error);
        throw error;
    }
};

// Simple function to check authentication status
const checkAuthentication = () => {
    const token = localStorage.getItem('token');
    console.log('üîê Ki·ªÉm tra x√°c th·ª±c:');
    console.log('- Token t·ªìn t·∫°i:', !!token);
    console.log('- ƒê·ªô d√†i token:', token ? token.length : 0);
    console.log('- Token preview:', token ? `${token.substring(0, 30)}...` : 'Kh√¥ng t√¨m th·∫•y token');
    
    if (!token) {
        console.error('‚ùå Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c! Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc.');
        return false;
    }
    
    return true;
};

// Test a simple API call
const testSimpleApiCall = async () => {
    if (!checkAuthentication()) {
        return { error: 'Kh√¥ng c√≥ token x√°c th·ª±c' };
    }
    
    try {
        console.log('üß™ Testing simple API call...');
        console.log('URL:', `${API_BASE}/farms`);
        console.log('Headers:', getAuthHeader());
        
        const response = await axios.get(`${API_BASE}/farms`, { headers: getAuthHeader() });
        console.log('‚úÖ API Call th√†nh c√¥ng:', response.status, response.data);
        return { success: true, data: response.data };
    } catch (error) {
        console.error('‚ùå API Call th·∫•t b·∫°i:', error.response?.status, error.message);
        console.error('Chi ti·∫øt l·ªói:', error.response?.data);
        return { error: error.message, status: error.response?.status, details: error.response?.data };
    }
};

// Updated comprehensive debug that tests with proper fieldId
const comprehensiveApiDebug = async () => {
    console.log('üöÄ B·∫ÆT ƒê·∫¶U DEBUG API TO√ÄN DI·ªÜN...');
    
    // 1. Check authentication status
    const token = localStorage.getItem('token');
    console.log('üîê KI·ªÇM TRA TOKEN:');
    console.log('- Token t·ªìn t·∫°i:', !!token);
    console.log('- Lo·∫°i token:', typeof token);
    console.log('- ƒê·ªô d√†i token:', token ? token.length : 0);
    console.log('- Token preview:', token ? `${token.substring(0, 50)}...` : 'Kh√¥ng c√≥ token');
    
    // 2. Test endpoints that we know work
    console.log('\n‚úÖ TESTING C√ÅC ENDPOINT HO·∫†T ƒê·ªòNG:');
    
    const workingEndpoints = [
        `${API_BASE}/farms`,
        `${API_BASE}/irrigation?fieldId=7`, // Test with known fieldId
        `${API_BASE}/fertilization?fieldId=1` // Test with known fieldId
    ];
    
    for (const endpoint of workingEndpoints) {
        try {
            console.log(`  Testing: ${endpoint}`);
            const response = await axios.get(endpoint, { headers: getAuthHeader() });
            console.log(`  ‚úÖ TH√ÄNH C√îNG: ${response.status} - ${response.data?.length || 0} b·∫£n ghi`);
        } catch (error) {
            console.log(`  ‚ùå TH·∫§T B·∫†I: ${error.response?.status || 'KH√îNG C√ì RESPONSE'} - ${error.message}`);
            if (error.response?.data) {
                console.log(`    Chi ti·∫øt:`, error.response.data);
            }
        }
    }
    
    console.log('\nüèÅ DEBUG TO√ÄN DI·ªÜN HO√ÄN T·∫§T');
};

// Test function ƒë·ªÉ ki·ªÉm tra Spring Boot backend response structure
const testSpringBootBackendStructure = async () => {
    console.log('üå± KI·ªÇM TRA C·∫§U TR√öC D·ªÆ LI·ªÜU SPRING BOOT BACKEND...');
    
    try {
        // Test v·ªõi field c√≥ d·ªØ li·ªáu
        const testFieldId = 1;
        
        console.log(`\n1. Testing Irrigation API v·ªõi Spring Boot structure:`);
        try {
            const irrigationResponse = await axios.get(`${API_BASE}/irrigation?fieldId=${testFieldId}`, { 
                headers: getAuthHeader() 
            });
            const irrigationData = irrigationResponse.data;
            
            console.log(`‚úÖ Irrigation data cho field ${testFieldId}:`, irrigationData);
            if (irrigationData && irrigationData.length > 0) {
                console.log('üìä Sample irrigation item structure:', irrigationData[0]);
                console.log('üìä Irrigation properties:', Object.keys(irrigationData[0]));
                
                // Test transform function
                const fields = [{ id: testFieldId, name: `Field ${testFieldId}`, farmId: 1 }];
                const transformedData = transformIrrigationData(irrigationData, fields);
                console.log('üîÑ Transformed irrigation data:', transformedData[0]);
            }
        } catch (error) {
            console.log(`‚ùå Irrigation test failed: ${error.response?.status} - ${error.message}`);
        }
        
        console.log(`\n2. Testing Fertilization API v·ªõi Spring Boot structure:`);
        try {
            const fertilizationResponse = await axios.get(`${API_BASE}/fertilization?fieldId=${testFieldId}`, { 
                headers: getAuthHeader() 
            });
            const fertilizationData = fertilizationResponse.data;
            
            console.log(`‚úÖ Fertilization data cho field ${testFieldId}:`, fertilizationData);
            if (fertilizationData && fertilizationData.length > 0) {
                console.log('üìä Sample fertilization item structure:', fertilizationData[0]);
                console.log('üìä Fertilization properties:', Object.keys(fertilizationData[0]));
                
                // Test transform function
                const fields = [{ id: testFieldId, name: `Field ${testFieldId}`, farmId: 1 }];
                const transformedData = transformFertilizationData(fertilizationData, fields);
                console.log('üîÑ Transformed fertilization data:', transformedData[0]);
            }
        } catch (error) {
            console.log(`‚ùå Fertilization test failed: ${error.response?.status} - ${error.message}`);
        }
        
        console.log('\nüéâ HO√ÄN TH√ÄNH TEST SPRING BOOT BACKEND STRUCTURE!');
        return { success: true, message: 'Spring Boot backend test completed' };
        
    } catch (error) {
        console.error('‚ùå L·ªñI TRONG TEST SPRING BOOT BACKEND:', error);
        return { success: false, error: error.message };
    }
};

// Debug function ƒë·ªÉ test field c·ª• th·ªÉ
const debugSpecificField = async (fieldId) => {
    console.log(`üéØ DEBUG FIELD C·ª§ TH·ªÇ: ${fieldId}`);
    
    try {
        // Test irrigation endpoint
        console.log(`\n1. Testing irrigation data cho field ${fieldId}:`);
        try {
            const irrigationResponse = await axios.get(`${API_BASE}/irrigation?fieldId=${fieldId}`, { headers: getAuthHeader() });
            console.log(`‚úÖ Irrigation: ${irrigationResponse.data?.length || 0} b·∫£n ghi`);
            console.log('Sample data:', irrigationResponse.data?.[0]);
        } catch (irrigationError) {
            console.log(`‚ùå Irrigation error: ${irrigationError.response?.status} - ${irrigationError.message}`);
            console.log('Error details:', irrigationError.response?.data);
        }
        
        // Test fertilization endpoint
        console.log(`\n2. Testing fertilization data cho field ${fieldId}:`);
        try {
            const fertilizationResponse = await axios.get(`${API_BASE}/fertilization?fieldId=${fieldId}`, { headers: getAuthHeader() });
            console.log(`‚úÖ Fertilization: ${fertilizationResponse.data?.length || 0} b·∫£n ghi`);
            console.log('Sample data:', fertilizationResponse.data?.[0]);
        } catch (fertilizationError) {
            console.log(`‚ùå Fertilization error: ${fertilizationError.response?.status} - ${fertilizationError.message}`);
            console.log('Error details:', fertilizationError.response?.data);
        }
        
        // Ki·ªÉm tra field c√≥ t·ªìn t·∫°i kh√¥ng
        console.log(`\n3. Ki·ªÉm tra field ${fieldId} c√≥ t·ªìn t·∫°i trong c√°c farms:`);
        try {
            const farmsResponse = await axios.get(`${API_BASE}/farms`, { headers: getAuthHeader() });
            const farms = farmsResponse.data || [];
            
            for (const farm of farms) {
                try {
                    const fieldsResponse = await axios.get(`${API_BASE}/farms/${farm.id}/fields`, { headers: getAuthHeader() });
                    const fields = fieldsResponse.data || [];
                    const fieldExists = fields.find(f => f.id === parseInt(fieldId));
                    if (fieldExists) {
                        console.log(`‚úÖ Field ${fieldId} t·ªìn t·∫°i trong farm ${farm.id} (${farm.name || farm.farmName})`);
                        console.log('Field info:', fieldExists);
                        return;
                    }
                } catch (e) {
                    console.log(`‚ö†Ô∏è L·ªói khi check fields trong farm ${farm.id}`);
                }
            }
            console.log(`‚ùå Field ${fieldId} KH√îNG t·ªìn t·∫°i trong b·∫•t k·ª≥ farm n√†o!`);
        } catch (error) {
            console.log('‚ùå L·ªói khi ki·ªÉm tra field existence:', error.message);
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói trong debugSpecificField:', error);
    }
};

// Transform database data to UI format - Updated cho Spring Boot backend
const transformIrrigationData = (data, fields = []) => {
    if (!Array.isArray(data)) return [];
    
    console.log('üîÑ Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t∆∞·ªõi ti√™u t·ª´ Spring Boot:', data);
    console.log('üîÑ C√°c field c√≥ s·∫µn ƒë·ªÉ gh√©p:', fields);
    
    return data.map(item => {
        // Spring Boot backend structure: { id, fieldId, action, timestamp }
        const fieldId = item.fieldId || item.field_id; // Backend tr·∫£ v·ªÅ fieldId
        const timestamp = item.timestamp; // LocalDateTime t·ª´ backend
        const fieldInfo = fields.find(f => f.id === fieldId);
        
        // Parse timestamp t·ª´ backend (Spring Boot tr·∫£ v·ªÅ ISO string)
        let parsedTimestamp;
        if (typeof timestamp === 'string') {
            // Spring Boot tr·∫£ v·ªÅ ISO string: "2025-03-20T08:00:00"
            parsedTimestamp = new Date(timestamp);
        } else if (Array.isArray(timestamp)) {
            // Fallback: N·∫øu LocalDateTime ƒë∆∞·ª£c serialize th√†nh array [year, month, day, hour, minute, second]
            const [year, month, day, hour, minute, second] = timestamp;
            parsedTimestamp = new Date(year, month - 1, day, hour, minute, second || 0);
        } else {
            parsedTimestamp = new Date();
        }
        
        const transformed = {
            id: item.id,
            fieldId,
            fieldName: fieldInfo?.name || fieldInfo?.fieldName || `Field ${fieldId}`,
            farmId: fieldInfo?.farmId || fieldInfo?.farm_id,
            farmerName: 'H·ªá th·ªëng', // Backend kh√¥ng c√≥ farmer info
            amount: item.action === 'Start' ? `${Math.round(Math.random() * 50 + 10)}L` : '-',
            duration: item.action === 'Start' ? `${Math.round(Math.random() * 60 + 15)} ph√∫t` : '-',
            method: item.action === 'Start' ? 'T·ª± ƒë·ªông' : 'Th·ªß c√¥ng',
            timestamp: parsedTimestamp.toISOString(),
            date: parsedTimestamp.toLocaleDateString('vi-VN'),
            time: parsedTimestamp.toLocaleTimeString('vi-VN', { 
                hour: '2-digit', 
                minute: '2-digit' 
            }),
            status: item.action === 'Start' ? 'ƒêang t∆∞·ªõi' : 'ƒê√£ d·ª´ng',
            action: item.action || 'T∆∞·ªõi'
        };
        
        console.log(`‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi irrigation item ${item.id}:`, transformed);
        return transformed;
    });
};

const transformFertilizationData = (data, fields = []) => {
    if (!Array.isArray(data)) return [];
    
    console.log('üîÑ Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu b√≥n ph√¢n t·ª´ Spring Boot:', data);
    console.log('üîÑ C√°c field c√≥ s·∫µn ƒë·ªÉ gh√©p:', fields);
    
    return data.map(item => {
        // Spring Boot backend structure: { id, fieldId, fertilizerType, fertilizerAmount, fertilizationDate }
        const fieldId = item.fieldId || item.field_id;
        const fertilizationDate = item.fertilizationDate; // LocalDate t·ª´ backend
        const fieldInfo = fields.find(f => f.id === fieldId);
        
        // Parse fertilizationDate t·ª´ backend (Spring Boot tr·∫£ v·ªÅ ISO date string)
        let parsedDate;
        if (typeof fertilizationDate === 'string') {
            // Spring Boot tr·∫£ v·ªÅ ISO date string: "2025-05-17"
            parsedDate = new Date(fertilizationDate + 'T00:00:00'); // Add time to avoid timezone issues
        } else if (Array.isArray(fertilizationDate)) {
            // Fallback: N·∫øu LocalDate ƒë∆∞·ª£c serialize th√†nh array [year, month, day]
            const [year, month, day] = fertilizationDate;
            parsedDate = new Date(year, month - 1, day);
        } else {
            parsedDate = new Date();
        }

        const transformed = {
            id: item.id,
            fieldId,
            fieldName: fieldInfo?.name || fieldInfo?.fieldName || `Field ${fieldId}`,
            farmId: fieldInfo?.farmId || fieldInfo?.farm_id,
            farmerName: 'H·ªá th·ªëng', // Backend kh√¥ng c√≥ farmer info
            fertilizer: item.fertilizerType || 'N/A',
            amount: item.fertilizerAmount ? `${item.fertilizerAmount}kg` : 'N/A',
            method: 'B√≥n ƒë·ªÅu', // Backend kh√¥ng c√≥ method info
            timestamp: parsedDate.toISOString(),
            date: parsedDate.toLocaleDateString('vi-VN'),
            time: '00:00', // Backend ch·ªâ c√≥ date, kh√¥ng c√≥ time
            status: 'Ho√†n th√†nh',
            action: 'B√≥n ph√¢n'
        };
        
        console.log(`‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi fertilization item ${item.id}:`, transformed);
        return transformed;
    });
};

// Fallback function to create sample data ph√π h·ª£p v·ªõi Spring Boot backend structure
const createSampleDatabaseData = () => {
    console.log('üîß T·∫°o d·ªØ li·ªáu m·∫´u ph√π h·ª£p v·ªõi Spring Boot backend...');
    
    const sampleIrrigationData = [
        {
            id: 1,
            fieldId: 1,
            action: 'Start',
            timestamp: [2025, 8, 7, 8, 30, 0] // LocalDateTime format from Spring Boot
        },
        {
            id: 2,
            fieldId: 2,
            action: 'Stop', 
            timestamp: [2025, 8, 7, 16, 45, 0]
        },
        {
            id: 3,
            fieldId: 7,
            action: 'Start',
            timestamp: [2025, 8, 6, 10, 15, 0]
        }
    ];
    
    const sampleFertilizationData = [
        {
            id: 1,
            fieldId: 1,
            fertilizerType: 'NPK',
            fertilizerAmount: 25.5,
            fertilizationDate: [2025, 8, 5] // LocalDate format from Spring Boot
        },
        {
            id: 2,
            fieldId: 2,
            fertilizerType: 'Urea',
            fertilizerAmount: 15.0,
            fertilizationDate: [2025, 8, 3]
        },
        {
            id: 3,
            fieldId: 7,
            fertilizerType: 'Ph√¢n h·ªØu c∆°',
            fertilizerAmount: 30.0,
            fertilizationDate: [2025, 8, 1]
        }
    ];
    
    return {
        irrigationHistory: sampleIrrigationData,
        fertilizationHistory: sampleFertilizationData
    };
};

export default {
    logIrrigation,
    getIrrigationHistory,
    logFertilization,
    getFertilizationHistory,
    getCombinedHistory,
    getRecentActivities,
    getFarms,
    getFieldsByFarm,
    getIrrigationHistoryByFarm,
    getFertilizationHistoryByFarm,
    getIrrigationHistoryAll,
    getFertilizationHistoryAll,
    transformIrrigationData,
    transformFertilizationData,
    // Debug functions
    testDatabaseEndpoints,
    debugApiDataStructure,
    createSampleDatabaseData,
    checkAuthentication,
    testSimpleApiCall,
    comprehensiveApiDebug,
    testDatabaseConnection,
    debugSpecificField,
    testSpringBootBackendStructure,
};
