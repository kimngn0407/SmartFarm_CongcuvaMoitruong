import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Typography,
  Paper,
  Grid,
  Card,
  CardContent,
  Button,
  IconButton,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert,
  Snackbar,
  CircularProgress,
  Fade,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Tooltip,
  Fab,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  Avatar,
} from '@mui/material';
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Visibility as VisibilityIcon,
  Refresh as RefreshIcon,
  FilterList as FilterIcon,
  CalendarToday as CalendarIcon,
  LocationOn as LocationIcon,
  Agriculture as AgricultureIcon,
  TrendingUp as TrendingUpIcon,
  Assessment as AssessmentIcon,
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  Schedule as ScheduleIcon,
  Grass as GrassIcon,
  LocalFlorist as LocalFloristIcon,
  Eco as EcoIcon,
  Scale as ScaleIcon,
  Star as StarIcon,
  StarHalf as StarHalfIcon,
  StarBorder as StarBorderIcon,
} from '@mui/icons-material';
import harvestService from '../../services/harvestService';
import fieldService from '../../services/fieldService';
import cropService from '../../services/cropService';

const LEAF_GREEN = '#43a047';
const LEAF_GREEN_LIGHT = '#81c784';
const LEAF_GREEN_DARK = '#388e3c';

const HarvestScreen = () => {
  const [harvests, setHarvests] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedHarvest, setSelectedHarvest] = useState(null);
  const [showAddDialog, setShowAddDialog] = useState(false);
  const [showEditDialog, setShowEditDialog] = useState(false);
  const [showDetailDialog, setShowDetailDialog] = useState(false);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [stats, setStats] = useState({ total: 0, completed: 0, pending: 0, scheduled: 0, totalQuantity: 0 });
  
  // Filter states
  const [statusFilter, setStatusFilter] = useState('all');
  const [fieldFilter, setFieldFilter] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');

  // Form states
  const [formData, setFormData] = useState({
    fieldId: '',
    cropType: '',
    harvestDate: '',
    quantity: '',
    quality: '',
    notes: ''
  });

  useEffect(() => {
    fetchHarvests();
    fetchStats();
  }, []);

  const fetchHarvests = async () => {
    try {
      setLoading(true);
      console.log('üîÑ Fetching harvests from API...');
      
      const response = await harvestService.getAllHarvests();
      console.log('‚úÖ API Response:', response.data);
      
      setHarvests(response.data);
    } catch (error) {
      console.error('‚ùå Error fetching harvests:', error);
      setSnackbar({
        open: true,
        message: 'L·ªói khi t·∫£i d·ªØ li·ªáu thu ho·∫°ch!',
        severity: 'error'
      });
      
      // Fallback to mock data if API fails
      const mockHarvests = [
        {
          id: 1,
          fieldName: 'Field 1',
          cropType: 'Lettuce',
          harvestDate: '2025-05-15',
          quantity: 2500,
          quality: 'T·ªët',
          status: 'COMPLETED',
          notes: 'Thu ho·∫°ch ƒë√∫ng th·ªùi v·ª•, nƒÉng su·∫•t cao'
        },
        {
          id: 2,
          fieldName: 'Field 2',
          cropType: 'Tomato',
          harvestDate: '2025-05-20',
          quantity: 1800,
          quality: 'Kh√°',
          status: 'COMPLETED',
          notes: 'Thu ho·∫°ch s·ªõm h∆°n d·ª± ki·∫øn'
        },
        {
          id: 3,
          fieldName: 'Field 3',
          cropType: 'Rice',
          harvestDate: '2025-05-25',
          quantity: 500,
          quality: 'T·ªët',
          status: 'PENDING',
          notes: 'Chu·∫©n b·ªã thu ho·∫°ch'
        },
        {
          id: 4,
          fieldName: 'Field 1',
          cropType: 'Corn',
          harvestDate: '2025-06-01',
          quantity: 1200,
          quality: 'T·ªët',
          status: 'SCHEDULED',
          notes: 'D·ª± ki·∫øn thu ho·∫°ch'
        }
      ];
      
      setHarvests(mockHarvests);
    } finally {
      setLoading(false);
    }
  };

  const fetchStats = async () => {
    try {
      const response = await harvestService.getHarvestStats();
      setStats(response.data);
    } catch (error) {
      console.error('Error fetching stats:', error);
      // Use calculated stats from harvests data
      const calculatedStats = getStats();
      setStats(calculatedStats);
    }
  };

  const handleAddHarvest = () => {
    setFormData({
      fieldId: '',
      cropType: 'Lettuce',
      harvestDate: '',
      quantity: '',
      quality: 'T·ªët',
      notes: ''
    });
    setShowAddDialog(true);
  };

  const handleEditHarvest = (harvest) => {
    setFormData({
      fieldId: harvest.fieldName,
      cropType: harvest.cropType,
      harvestDate: harvest.harvestDate,
      quantity: harvest.quantity.toString(),
      quality: harvest.quality,
      notes: harvest.notes
    });
    setSelectedHarvest(harvest);
    setShowEditDialog(true);
  };

  const handleViewDetail = (harvest) => {
    setSelectedHarvest(harvest);
    setShowDetailDialog(true);
  };

  const handleDeleteHarvest = async (harvestId) => {
    try {
      console.log('üóëÔ∏è Deleting harvest:', harvestId);
      await harvestService.deleteHarvest(harvestId);
      
      setHarvests(harvests.filter(h => h.id !== harvestId));
      setSnackbar({
        open: true,
        message: 'ƒê√£ x√≥a th√¥ng tin thu ho·∫°ch!',
        severity: 'success'
      });
      
      // Refresh stats after deletion
      fetchStats();
    } catch (error) {
      console.error('Error deleting harvest:', error);
      setSnackbar({
        open: true,
        message: 'L·ªói khi x√≥a th√¥ng tin thu ho·∫°ch!',
        severity: 'error'
      });
    }
  };

  const handleSaveHarvest = async () => {
    try {
      console.log('üíæ Saving harvest data:', formData);
      
      const harvestData = {
        fieldId: formData.fieldId ? parseInt(formData.fieldId.replace('Field ', '')) : null,
        cropType: formData.cropType,
        harvestDate: formData.harvestDate,
        quantity: parseFloat(formData.quantity),
        quality: formData.quality,
        notes: formData.notes || '' // Ensure notes is empty string if not provided
      };

      if (showEditDialog) {
        // Update existing harvest
        const response = await harvestService.updateHarvest(selectedHarvest.id, harvestData);
        setHarvests(harvests.map(h => 
          h.id === selectedHarvest.id ? response.data : h
        ));
        setSnackbar({
          open: true,
          message: 'ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin thu ho·∫°ch!',
          severity: 'success'
        });
      } else {
        // Add new harvest
        const response = await harvestService.createHarvest(harvestData);
        setHarvests([...harvests, response.data]);
        setSnackbar({
          open: true,
          message: 'ƒê√£ th√™m th√¥ng tin thu ho·∫°ch!',
          severity: 'success'
        });
      }
      
      setShowAddDialog(false);
      setShowEditDialog(false);
      
      // Refresh stats after save
      fetchStats();
    } catch (error) {
      console.error('Error saving harvest:', error);
      setSnackbar({
        open: true,
        message: 'L·ªói khi l∆∞u th√¥ng tin thu ho·∫°ch!',
        severity: 'error'
      });
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'COMPLETED':
        return 'success';
      case 'PENDING':
        return 'warning';
      case 'SCHEDULED':
        return 'info';
      default:
        return 'default';
    }
  };

  const getStatusLabel = (status) => {
    switch (status) {
      case 'COMPLETED':
        return 'ƒê√£ ho√†n th√†nh';
      case 'PENDING':
        return 'ƒêang th·ª±c hi·ªán';
      case 'SCHEDULED':
        return 'ƒê√£ l√™n l·ªãch';
      default:
        return status;
    }
  };

  const getQualityColor = (quality) => {
    switch (quality) {
      case 'T·ªët':
        return 'success';
      case 'Kh√°':
        return 'warning';
      case 'Trung b√¨nh':
        return 'error';
      default:
        return 'default';
    }
  };

  const getStats = () => {
    const total = harvests.length;
    const completed = harvests.filter(h => h.status === 'COMPLETED').length;
    const pending = harvests.filter(h => h.status === 'PENDING').length;
    const scheduled = harvests.filter(h => h.status === 'SCHEDULED').length;
    const totalQuantity = harvests.reduce((sum, h) => sum + (h.quantity || 0), 0);

    return { total, completed, pending, scheduled, totalQuantity };
  };

  const filteredHarvests = harvests.filter(harvest => {
    const matchesStatus = statusFilter === 'all' || harvest.status === statusFilter;
    const matchesField = fieldFilter === 'all' || harvest.fieldName === fieldFilter;
    const matchesSearch = !searchTerm || 
      harvest.cropType.toLowerCase().includes(searchTerm.toLowerCase()) ||
      harvest.fieldName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (harvest.notes && harvest.notes.toLowerCase().includes(searchTerm.toLowerCase()));
    
    return matchesStatus && matchesField && matchesSearch;
  });

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '60vh' }}>
        <CircularProgress color="success" />
      </Box>
    );
  }

  return (
    <Container maxWidth="lg">
      <Box sx={{ mt: 4, mb: 6 }}>
        <Fade in={!loading} timeout={600}>
          <Box>
            {/* Header */}
            <Box sx={{ mb: 4 }}>
              <Typography variant="h4" fontWeight={600} color={LEAF_GREEN} sx={{ mb: 1 }}>
                Qu·∫£n l√Ω Thu ho·∫°ch
              </Typography>
              <Typography variant="body1" color="text.secondary">
                Theo d√µi v√† qu·∫£n l√Ω th√¥ng tin thu ho·∫°ch t·ª´ c√°c khu v·ª±c canh t√°c
              </Typography>
            </Box>

            {/* Statistics Cards */}
            <Grid container spacing={3} sx={{ mb: 4 }}>
              <Grid item xs={12} sm={6} md={3}>
                <Card sx={{ 
                  background: 'linear-gradient(135deg, #4caf50 0%, #388e3c 100%)',
                  color: '#fff',
                  borderRadius: 3
                }}>
                  <CardContent>
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                      <Box>
                        <Typography variant="h4" fontWeight={600}>{stats.completed}</Typography>
                        <Typography variant="body2">ƒê√£ ho√†n th√†nh</Typography>
                      </Box>
                      <CheckCircleIcon sx={{ fontSize: 40, opacity: 0.8 }} />
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
              
              <Grid item xs={12} sm={6} md={3}>
                <Card sx={{ 
                  background: 'linear-gradient(135deg, #ff9800 0%, #f57c00 100%)',
                  color: '#fff',
                  borderRadius: 3
                }}>
                  <CardContent>
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                      <Box>
                        <Typography variant="h4" fontWeight={600}>{stats.pending}</Typography>
                        <Typography variant="body2">ƒêang th·ª±c hi·ªán</Typography>
                      </Box>
                      <ScheduleIcon sx={{ fontSize: 40, opacity: 0.8 }} />
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
              
              <Grid item xs={12} sm={6} md={3}>
                <Card sx={{ 
                  background: 'linear-gradient(135deg, #2196f3 0%, #1976d2 100%)',
                  color: '#fff',
                  borderRadius: 3
                }}>
                  <CardContent>
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                      <Box>
                        <Typography variant="h4" fontWeight={600}>{stats.scheduled}</Typography>
                        <Typography variant="body2">ƒê√£ l√™n l·ªãch</Typography>
                      </Box>
                      <CalendarIcon sx={{ fontSize: 40, opacity: 0.8 }} />
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
              
              <Grid item xs={12} sm={6} md={3}>
                <Card sx={{ 
                  background: 'linear-gradient(135deg, #43a047 0%, #388e3c 100%)',
                  color: '#fff',
                  borderRadius: 3
                }}>
                  <CardContent>
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                      <Box>
                        <Typography variant="h4" fontWeight={600}>{stats.totalQuantity.toLocaleString()}</Typography>
                        <Typography variant="body2">T·ªïng s·∫£n l∆∞·ª£ng (kg)</Typography>
                      </Box>
                      <TrendingUpIcon sx={{ fontSize: 40, opacity: 0.8 }} />
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>

            {/* Filters and Actions */}
            <Paper sx={{ p: 3, mb: 3, borderRadius: 3 }}>
              <Grid container spacing={2} alignItems="center">
                <Grid item xs={12} md={4}>
                  <TextField
                    fullWidth
                    placeholder="T√¨m ki·∫øm thu ho·∫°ch..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    InputProps={{
                      startAdornment: <FilterIcon sx={{ mr: 1, color: 'text.secondary' }} />
                    }}
                  />
                </Grid>
                <Grid item xs={12} md={2}>
                  <FormControl fullWidth>
                    <InputLabel>Tr·∫°ng th√°i</InputLabel>
                    <Select
                      value={statusFilter}
                      onChange={(e) => setStatusFilter(e.target.value)}
                      label="Tr·∫°ng th√°i"
                    >
                      <MenuItem value="all">T·∫•t c·∫£</MenuItem>
                      <MenuItem value="COMPLETED">ƒê√£ ho√†n th√†nh</MenuItem>
                      <MenuItem value="PENDING">ƒêang th·ª±c hi·ªán</MenuItem>
                      <MenuItem value="SCHEDULED">ƒê√£ l√™n l·ªãch</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} md={2}>
                  <FormControl fullWidth>
                    <InputLabel>Khu v·ª±c</InputLabel>
                    <Select
                      value={fieldFilter}
                      onChange={(e) => setFieldFilter(e.target.value)}
                      label="Khu v·ª±c"
                    >
                      <MenuItem value="all">T·∫•t c·∫£</MenuItem>
                      <MenuItem value="Field 1">Field 1</MenuItem>
                      <MenuItem value="Field 2">Field 2</MenuItem>
                      <MenuItem value="Field 3">Field 3</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} md={2}>
                  <Button
                    fullWidth
                    variant="outlined"
                    onClick={() => {
                      fetchHarvests();
                      fetchStats();
                    }}
                    startIcon={<RefreshIcon />}
                  >
                    L√†m m·ªõi
                  </Button>
                </Grid>
                <Grid item xs={12} md={2}>
                  <Button
                    fullWidth
                    variant="contained"
                    onClick={handleAddHarvest}
                    startIcon={<AddIcon />}
                    sx={{ backgroundColor: LEAF_GREEN }}
                  >
                    Th√™m m·ªõi
                  </Button>
                </Grid>
              </Grid>
            </Paper>

            {/* Harvest Table */}
            <Paper sx={{ borderRadius: 3, overflow: 'hidden' }}>
              <TableContainer>
                <Table>
                  <TableHead>
                    <TableRow sx={{ backgroundColor: LEAF_GREEN_LIGHT }}>
                      <TableCell sx={{ fontWeight: 600 }}>Khu v·ª±c</TableCell>
                      <TableCell sx={{ fontWeight: 600 }}>Lo·∫°i c√¢y tr·ªìng</TableCell>
                      <TableCell sx={{ fontWeight: 600 }}>Ng√†y thu ho·∫°ch</TableCell>
                      <TableCell sx={{ fontWeight: 600 }}>S·∫£n l∆∞·ª£ng (kg)</TableCell>
                      <TableCell sx={{ fontWeight: 600 }}>Ch·∫•t l∆∞·ª£ng</TableCell>
                      <TableCell sx={{ fontWeight: 600 }}>Tr·∫°ng th√°i</TableCell>
                      <TableCell sx={{ fontWeight: 600 }}>Thao t√°c</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {filteredHarvests
                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                      .map((harvest) => (
                        <TableRow key={harvest.id} hover>
                          <TableCell>
                            <Box sx={{ display: 'flex', alignItems: 'center' }}>
                              <LocationIcon sx={{ mr: 1, color: 'text.secondary' }} />
                              {harvest.fieldName}
                            </Box>
                          </TableCell>
                          <TableCell>
                            <Box sx={{ display: 'flex', alignItems: 'center' }}>
                              <AgricultureIcon sx={{ mr: 1, color: 'text.secondary' }} />
                              {harvest.cropType}
                            </Box>
                          </TableCell>
                          <TableCell>{harvest.harvestDate}</TableCell>
                          <TableCell>{harvest.quantity ? harvest.quantity.toLocaleString() : '0'}</TableCell>
                          <TableCell>
                            <Chip
                              label={harvest.quality || 'T·ªët'}
                              color={getQualityColor(harvest.quality)}
                              size="small"
                            />
                          </TableCell>
                          <TableCell>
                            <Chip
                              label={getStatusLabel(harvest.status)}
                              color={getStatusColor(harvest.status)}
                              size="small"
                            />
                          </TableCell>
                          <TableCell>
                            <Box sx={{ display: 'flex', gap: 1 }}>
                              <Tooltip title="Xem chi ti·∫øt">
                                <IconButton
                                  onClick={() => handleViewDetail(harvest)}
                                  color="primary"
                                  size="small"
                                >
                                  <VisibilityIcon />
                                </IconButton>
                              </Tooltip>
                              <Tooltip title="Ch·ªânh s·ª≠a">
                                <IconButton
                                  onClick={() => handleEditHarvest(harvest)}
                                  color="warning"
                                  size="small"
                                >
                                  <EditIcon />
                                </IconButton>
                              </Tooltip>
                              <Tooltip title="X√≥a">
                                <IconButton
                                  onClick={() => handleDeleteHarvest(harvest.id)}
                                  color="error"
                                  size="small"
                                >
                                  <DeleteIcon />
                                </IconButton>
                              </Tooltip>
                            </Box>
                          </TableCell>
                        </TableRow>
                      ))}
                  </TableBody>
                </Table>
              </TableContainer>
              <TablePagination
                rowsPerPageOptions={[5, 10, 25]}
                component="div"
                count={filteredHarvests.length}
                rowsPerPage={rowsPerPage}
                page={page}
                onPageChange={(event, newPage) => setPage(newPage)}
                onRowsPerPageChange={(event) => {
                  setRowsPerPage(parseInt(event.target.value, 10));
                  setPage(0);
                }}
                labelRowsPerPage="S·ªë h√†ng m·ªói trang:"
                labelDisplayedRows={({ from, to, count }) => `${from}-${to} c·ªßa ${count}`}
              />
            </Paper>
          </Box>
        </Fade>

        {/* Add/Edit Harvest Dialog */}
        <Dialog
          open={showAddDialog || showEditDialog}
          onClose={() => {
            setShowAddDialog(false);
            setShowEditDialog(false);
          }}
          maxWidth="sm"
          fullWidth
          PaperProps={{
            sx: {
              borderRadius: '16px',
              background: 'linear-gradient(145deg, #ffffff 0%, #f8fafc 100%)',
              boxShadow: '0 20px 40px rgba(0,0,0,0.1)',
              overflow: 'hidden'
            }
          }}
        >
          <Box
            sx={{
              background: 'linear-gradient(135deg, #DCFCE7 0%, #BBF7D0 100%)',
              p: 3,
              textAlign: 'center',
              borderBottom: '1px solid #e0e0e0'
            }}
          >
            <Avatar
              sx={{
                bgcolor: '#059669',
                width: 56,
                height: 56,
                mx: 'auto',
                mb: 1
              }}
            >
              <AgricultureIcon sx={{ fontSize: 30 }} />
            </Avatar>
            <DialogTitle sx={{ p: 0, color: '#059669', fontWeight: 600 }}>
              {showAddDialog ? 'Th√™m th√¥ng tin thu ho·∫°ch m·ªõi' : 'Ch·ªânh s·ª≠a th√¥ng tin thu ho·∫°ch'}
            </DialogTitle>
          </Box>
          <DialogContent sx={{ p: 3 }}>
            <Grid container spacing={3} sx={{ mt: 0 }}>
              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel sx={{ color: '#64748B', fontWeight: 500 }}>Khu v·ª±c</InputLabel>
                  <Select
                    value={formData.fieldId}
                    onChange={(e) => setFormData({ ...formData, fieldId: e.target.value })}
                    label="Khu v·ª±c"
                    sx={{
                      borderRadius: '12px',
                      backgroundColor: '#f8fafc',
                      '& .MuiOutlinedInput-notchedOutline': {
                        borderColor: '#e2e8f0',
                      },
                      '&:hover .MuiOutlinedInput-notchedOutline': {
                        borderColor: '#059669',
                      },
                      '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                        borderColor: '#059669',
                      }
                    }}
                  >
                    <MenuItem value="Field 1">
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Avatar sx={{ width: 24, height: 24, bgcolor: '#10B981' }}>
                          <LocationIcon sx={{ fontSize: 14 }} />
                        </Avatar>
                        <Typography>Field 1</Typography>
                      </Box>
                    </MenuItem>
                    <MenuItem value="Field 2">
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Avatar sx={{ width: 24, height: 24, bgcolor: '#10B981' }}>
                          <LocationIcon sx={{ fontSize: 14 }} />
                        </Avatar>
                        <Typography>Field 2</Typography>
                      </Box>
                    </MenuItem>
                    <MenuItem value="Field 3">
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Avatar sx={{ width: 24, height: 24, bgcolor: '#10B981' }}>
                          <LocationIcon sx={{ fontSize: 14 }} />
                        </Avatar>
                        <Typography>Field 3</Typography>
                      </Box>
                    </MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel sx={{ color: '#64748B', fontWeight: 500 }}>Lo·∫°i c√¢y tr·ªìng</InputLabel>
                  <Select
                    value={formData.cropType}
                    onChange={(e) => setFormData({ ...formData, cropType: e.target.value })}
                    label="Lo·∫°i c√¢y tr·ªìng"
                    sx={{
                      borderRadius: '12px',
                      backgroundColor: '#f8fafc',
                      '& .MuiOutlinedInput-notchedOutline': {
                        borderColor: '#e2e8f0',
                      },
                      '&:hover .MuiOutlinedInput-notchedOutline': {
                        borderColor: '#059669',
                      },
                      '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                        borderColor: '#059669',
                      }
                    }}
                  >
                    <MenuItem value="Lettuce">
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Avatar sx={{ width: 24, height: 24, bgcolor: '#22C55E' }}>
                          <LocalFloristIcon sx={{ fontSize: 14 }} />
                        </Avatar>
                        <Typography>X√† l√°ch (Lettuce)</Typography>
                      </Box>
                    </MenuItem>
                    <MenuItem value="Tomato">
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Avatar sx={{ width: 24, height: 24, bgcolor: '#EF4444' }}>
                          <LocalFloristIcon sx={{ fontSize: 14 }} />
                        </Avatar>
                        <Typography>C√† chua (Tomato)</Typography>
                      </Box>
                    </MenuItem>
                    <MenuItem value="Rice">
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Avatar sx={{ width: 24, height: 24, bgcolor: '#F59E0B' }}>
                          <GrassIcon sx={{ fontSize: 14 }} />
                        </Avatar>
                        <Typography>L√∫a (Rice)</Typography>
                      </Box>
                    </MenuItem>
                    <MenuItem value="Corn">
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Avatar sx={{ width: 24, height: 24, bgcolor: '#EAB308' }}>
                          <GrassIcon sx={{ fontSize: 14 }} />
                        </Avatar>
                        <Typography>Ng√¥ (Corn)</Typography>
                      </Box>
                    </MenuItem>
                    <MenuItem value="Vegetable">
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Avatar sx={{ width: 24, height: 24, bgcolor: '#16A34A' }}>
                          <LocalFloristIcon sx={{ fontSize: 14 }} />
                        </Avatar>
                        <Typography>Rau c·∫£i (Vegetable)</Typography>
                      </Box>
                    </MenuItem>
                    <MenuItem value="Soybean">
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Avatar sx={{ width: 24, height: 24, bgcolor: '#84CC16' }}>
                          <LocalFloristIcon sx={{ fontSize: 14 }} />
                        </Avatar>
                        <Typography>ƒê·∫≠u t∆∞∆°ng (Soybean)</Typography>
                      </Box>
                    </MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  label="Ng√†y thu ho·∫°ch"
                  type="date"
                  value={formData.harvestDate}
                  onChange={(e) => setFormData({ ...formData, harvestDate: e.target.value })}
                  InputLabelProps={{ shrink: true }}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: '12px',
                      backgroundColor: '#f8fafc',
                      '&:hover': {
                        backgroundColor: '#f1f5f9'
                      }
                    }
                  }}
                />
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  label="S·∫£n l∆∞·ª£ng (kg)"
                  type="number"
                  value={formData.quantity}
                  onChange={(e) => setFormData({ ...formData, quantity: e.target.value })}
                  placeholder="V√≠ d·ª•: 150"
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: '12px',
                      backgroundColor: '#f8fafc',
                      '&:hover': {
                        backgroundColor: '#f1f5f9'
                      }
                    }
                  }}
                />
              </Grid>
              
              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel sx={{ color: '#64748B', fontWeight: 500 }}>Ch·∫•t l∆∞·ª£ng</InputLabel>
                  <Select
                    value={formData.quality}
                    onChange={(e) => setFormData({ ...formData, quality: e.target.value })}
                    label="Ch·∫•t l∆∞·ª£ng"
                    sx={{
                      borderRadius: '12px',
                      backgroundColor: '#f8fafc',
                      '& .MuiOutlinedInput-notchedOutline': {
                        borderColor: '#e2e8f0',
                      },
                      '&:hover .MuiOutlinedInput-notchedOutline': {
                        borderColor: '#059669',
                      },
                      '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                        borderColor: '#059669',
                      }
                    }}
                  >
                    <MenuItem value="T·ªët">
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Avatar sx={{ width: 24, height: 24, bgcolor: '#22C55E' }}>
                          <StarIcon sx={{ fontSize: 14 }} />
                        </Avatar>
                        <Typography>T·ªët (Xu·∫•t s·∫Øc)</Typography>
                      </Box>
                    </MenuItem>
                    <MenuItem value="Kh√°">
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Avatar sx={{ width: 24, height: 24, bgcolor: '#3B82F6' }}>
                          <StarHalfIcon sx={{ fontSize: 14 }} />
                        </Avatar>
                        <Typography>Kh√° (T·ªët)</Typography>
                      </Box>
                    </MenuItem>
                    <MenuItem value="Trung b√¨nh">
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Avatar sx={{ width: 24, height: 24, bgcolor: '#F59E0B' }}>
                          <StarBorderIcon sx={{ fontSize: 14 }} />
                        </Avatar>
                        <Typography>Trung b√¨nh</Typography>
                      </Box>
                    </MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Ghi ch√∫"
                  multiline
                  rows={3}
                  value={formData.notes}
                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                  placeholder="Th√™m ghi ch√∫ v·ªÅ qu√° tr√¨nh thu ho·∫°ch, ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt, ho·∫∑c c√°c l∆∞u √Ω kh√°c..."
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: '12px',
                      backgroundColor: '#f8fafc',
                      '&:hover': {
                        backgroundColor: '#f1f5f9'
                      }
                    }
                  }}
                />
              </Grid>
            </Grid>
          </DialogContent>
          <DialogActions sx={{ p: 3, gap: 2 }}>
            <Button 
              onClick={() => {
                setShowAddDialog(false);
                setShowEditDialog(false);
              }}
              variant="outlined"
              sx={{
                borderRadius: '12px',
                textTransform: 'none',
                px: 3,
                py: 1.5,
                borderColor: '#e0e0e0',
                color: '#666',
                '&:hover': {
                  backgroundColor: '#f5f5f5',
                  borderColor: '#d0d0d0'
                }
              }}
            >
              H·ªßy b·ªè
            </Button>
            <Button 
              onClick={handleSaveHarvest}
              variant="contained"
              sx={{
                borderRadius: '12px',
                textTransform: 'none',
                px: 4,
                py: 1.5,
                background: 'linear-gradient(135deg, #059669 0%, #047857 100%)',
                boxShadow: '0 4px 15px rgba(5, 150, 105, 0.3)',
                '&:hover': {
                  background: 'linear-gradient(135deg, #047857 0%, #059669 100%)',
                  boxShadow: '0 6px 20px rgba(5, 150, 105, 0.4)'
                }
              }}
            >
              {showAddDialog ? 'Th√™m thu ho·∫°ch' : 'C·∫≠p nh·∫≠t th√¥ng tin'}
            </Button>
          </DialogActions>
        </Dialog>

        {/* Harvest Detail Dialog */}
        <Dialog
          open={showDetailDialog}
          onClose={() => setShowDetailDialog(false)}
          maxWidth="md"
          fullWidth
          PaperProps={{
            sx: {
              borderRadius: '16px',
              background: 'linear-gradient(145deg, #ffffff 0%, #f8fafc 100%)',
              boxShadow: '0 20px 40px rgba(0,0,0,0.1)',
              overflow: 'hidden'
            }
          }}
        >
          <Box
            sx={{
              background: 'linear-gradient(135deg, #DCFCE7 0%, #BBF7D0 100%)',
              p: 3,
              textAlign: 'center',
              borderBottom: '1px solid #e0e0e0'
            }}
          >
            <Avatar
              sx={{
                bgcolor: '#059669',
                width: 64,
                height: 64,
                mx: 'auto',
                mb: 2
              }}
            >
              <VisibilityIcon sx={{ fontSize: 36 }} />
            </Avatar>
            <DialogTitle sx={{ p: 0, color: '#059669', fontWeight: 600, fontSize: '1.5rem' }}>
              Chi ti·∫øt th√¥ng tin thu ho·∫°ch
            </DialogTitle>
          </Box>
          
          <DialogContent sx={{ p: 0 }}>
            {selectedHarvest && (
              <Box sx={{ p: 4 }}>
                {/* Header Card v·ªõi th√¥ng tin c∆° b·∫£n */}
                <Paper 
                  elevation={0} 
                  sx={{ 
                    p: 3, 
                    mb: 3, 
                    borderRadius: '12px',
                    background: 'linear-gradient(135deg, #F0FDF4 0%, #DCFCE7 100%)',
                    border: '1px solid #BBF7D0'
                  }}
                >
                  <Grid container spacing={3} alignItems="center">
                    <Grid item xs={12} md={6}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                        <Avatar sx={{ bgcolor: '#10B981', width: 48, height: 48 }}>
                          <LocationIcon sx={{ fontSize: 24 }} />
                        </Avatar>
                        <Box>
                          <Typography variant="h6" sx={{ fontWeight: 600, color: '#059669' }}>
                            {selectedHarvest.fieldName}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            Khu v·ª±c canh t√°c
                          </Typography>
                        </Box>
                      </Box>
                    </Grid>
                    <Grid item xs={12} md={6}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                        <Avatar sx={{ bgcolor: '#EF4444', width: 48, height: 48 }}>
                          <LocalFloristIcon sx={{ fontSize: 24 }} />
                        </Avatar>
                        <Box>
                          <Typography variant="h6" sx={{ fontWeight: 600, color: '#059669' }}>
                            {selectedHarvest.cropType}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            Lo·∫°i c√¢y tr·ªìng
                          </Typography>
                        </Box>
                      </Box>
                    </Grid>
                  </Grid>
                </Paper>

                {/* Th√¥ng tin chi ti·∫øt */}
                <Grid container spacing={3}>
                  {/* Ng√†y thu ho·∫°ch */}
                  <Grid item xs={12} md={6}>
                    <Paper 
                      elevation={0} 
                      sx={{ 
                        p: 3, 
                        borderRadius: '12px',
                        background: 'linear-gradient(135deg, #FEF3C7 0%, #FEF9C3 100%)',
                        border: '1px solid #FDE68A',
                        textAlign: 'center'
                      }}
                    >
                      <Avatar sx={{ bgcolor: '#F59E0B', mx: 'auto', mb: 2, width: 56, height: 56 }}>
                        <CalendarIcon sx={{ fontSize: 28 }} />
                      </Avatar>
                      <Typography variant="h6" sx={{ fontWeight: 600, color: '#92400E', mb: 1 }}>
                        {selectedHarvest.harvestDate}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        Ng√†y thu ho·∫°ch
                      </Typography>
                    </Paper>
                  </Grid>

                  {/* S·∫£n l∆∞·ª£ng */}
                  <Grid item xs={12} md={6}>
                    <Paper 
                      elevation={0} 
                      sx={{ 
                        p: 3, 
                        borderRadius: '12px',
                        background: 'linear-gradient(135deg, #DBEAFE 0%, #BFDBFE 100%)',
                        border: '1px solid #93C5FD',
                        textAlign: 'center'
                      }}
                    >
                      <Avatar sx={{ bgcolor: '#3B82F6', mx: 'auto', mb: 2, width: 56, height: 56 }}>
                        <ScaleIcon sx={{ fontSize: 28 }} />
                      </Avatar>
                      <Typography variant="h6" sx={{ fontWeight: 600, color: '#1E40AF', mb: 1 }}>
                        {selectedHarvest.quantity ? selectedHarvest.quantity.toLocaleString() : '0'} kg
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        S·∫£n l∆∞·ª£ng thu ho·∫°ch
                      </Typography>
                    </Paper>
                  </Grid>

                  {/* Ch·∫•t l∆∞·ª£ng */}
                  <Grid item xs={12} md={6}>
                    <Paper 
                      elevation={0} 
                      sx={{ 
                        p: 3, 
                        borderRadius: '12px',
                        background: 'linear-gradient(135deg, #F3E8FF 0%, #E9D5FF 100%)',
                        border: '1px solid #C4B5FD',
                        textAlign: 'center'
                      }}
                    >
                      <Avatar sx={{ bgcolor: '#8B5CF6', mx: 'auto', mb: 2, width: 56, height: 56 }}>
                        <StarIcon sx={{ fontSize: 28 }} />
                      </Avatar>
                      <Box sx={{ mb: 1 }}>
                        <Chip
                          label={selectedHarvest.quality || 'T·ªët'}
                          color={getQualityColor(selectedHarvest.quality)}
                          sx={{ 
                            fontWeight: 600, 
                            fontSize: '0.9rem',
                            px: 2,
                            borderRadius: '8px'
                          }}
                        />
                      </Box>
                      <Typography variant="body2" color="text.secondary">
                        Ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m
                      </Typography>
                    </Paper>
                  </Grid>

                  {/* Tr·∫°ng th√°i */}
                  <Grid item xs={12} md={6}>
                    <Paper 
                      elevation={0} 
                      sx={{ 
                        p: 3, 
                        borderRadius: '12px',
                        background: 'linear-gradient(135deg, #FEF2F2 0%, #FEE2E2 100%)',
                        border: '1px solid #FECACA',
                        textAlign: 'center'
                      }}
                    >
                      <Avatar sx={{ bgcolor: '#EF4444', mx: 'auto', mb: 2, width: 56, height: 56 }}>
                        <AssessmentIcon sx={{ fontSize: 28 }} />
                      </Avatar>
                      <Box sx={{ mb: 1 }}>
                        <Chip
                          label={getStatusLabel(selectedHarvest.status)}
                          color={getStatusColor(selectedHarvest.status)}
                          sx={{ 
                            fontWeight: 600, 
                            fontSize: '0.9rem',
                            px: 2,
                            borderRadius: '8px'
                          }}
                        />
                      </Box>
                      <Typography variant="body2" color="text.secondary">
                        Tr·∫°ng th√°i hi·ªán t·∫°i
                      </Typography>
                    </Paper>
                  </Grid>

                  {/* Ghi ch√∫ */}
                  <Grid item xs={12}>
                    <Paper 
                      elevation={0} 
                      sx={{ 
                        p: 3, 
                        borderRadius: '12px',
                        background: 'linear-gradient(135deg, #F8FAFC 0%, #F1F5F9 100%)',
                        border: '1px solid #E2E8F0'
                      }}
                    >
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                        <Avatar sx={{ bgcolor: '#64748B', width: 40, height: 40 }}>
                          <EditIcon sx={{ fontSize: 20 }} />
                        </Avatar>
                        <Typography variant="h6" sx={{ fontWeight: 600, color: '#334155' }}>
                          Ghi ch√∫
                        </Typography>
                      </Box>
                      <Typography 
                        variant="body1" 
                        sx={{ 
                          color: '#475569',
                          lineHeight: 1.6,
                          fontStyle: selectedHarvest.notes ? 'normal' : 'italic'
                        }}
                      >
                        {selectedHarvest.notes || 'Kh√¥ng c√≥ ghi ch√∫ n√†o ƒë∆∞·ª£c th√™m cho ƒë·ª£t thu ho·∫°ch n√†y.'}
                      </Typography>
                    </Paper>
                  </Grid>
                </Grid>
              </Box>
            )}
          </DialogContent>
          
          <DialogActions sx={{ p: 3, borderTop: '1px solid #e0e0e0' }}>
            <Button 
              onClick={() => setShowDetailDialog(false)}
              variant="contained"
              sx={{
                borderRadius: '12px',
                textTransform: 'none',
                px: 4,
                py: 1.5,
                background: 'linear-gradient(135deg, #059669 0%, #047857 100%)',
                boxShadow: '0 4px 15px rgba(5, 150, 105, 0.3)',
                '&:hover': {
                  background: 'linear-gradient(135deg, #047857 0%, #059669 100%)',
                  boxShadow: '0 6px 20px rgba(5, 150, 105, 0.4)'
                }
              }}
            >
              ƒê√≥ng
            </Button>
          </DialogActions>
        </Dialog>

        {/* Snackbar */}
        <Snackbar
          open={snackbar.open}
          autoHideDuration={6000}
          onClose={() => setSnackbar({ ...snackbar, open: false })}
        >
          <Alert
            onClose={() => setSnackbar({ ...snackbar, open: false })}
            severity={snackbar.severity}
            sx={{ width: '100%' }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </Box>
    </Container>
  );
};

export default HarvestScreen; 